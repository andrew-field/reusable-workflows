name: Bump clean go mod

on:
  workflow_call:

# checkov gives an error about ensuring the top level permissions are not set to write-all. Setting the permissions to something like permissions: contents: read however
# creates a requirement to the calling workflows, which the public repositories do not satisfy as they do not need any set permissions.

jobs:
  check_go_mod:
    name: Bump and clean go mod
    runs-on: ubuntu-latest
    steps:
      # Get the code.
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      # Fetch the latest go version as text to build and test with the latest go version.
      # This works under the principle of keeping up to date with the latest releases.
      - name: Get latest go version
        # Store as an environment variable.
        run: echo "LATEST_GO_VERSION=$(curl https://go.dev/VERSION?m=text | grep -oP '(\d+\.\d+\.\d+)')" >> "$GITHUB_ENV" # Good practise to have $GITHUB_ENV double quoted according to SC2086 â€“ ShellCheck.

      # Get the latest go runtime.
      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.LATEST_GO_VERSION }} # Access via the environment context.

      # Go command to edit the mod file and update the go version.
      - name: Update go version in go mod
        run: go mod edit -go ${LATEST_GO_VERSION}
        env:
          LATEST_GO_VERSION: ${{ env.LATEST_GO_VERSION }}

      # Go command to update all the dependencies. Just do patch updates for now. With only stable dependencies it should be possible to just go get -u ./...
      - name: Update go dependencies
        run: go get -u=patch ./...

      # Go clean up
      - name: Go mod tidy
        run: go mod tidy

      # Generate token.
      - name: Get app token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: app-token
        with:
          # The create-github-app-token example stores the App ID as an environment variable but it is just easier to pass secrets (using inherit)
          # than to store and pass environment variables.
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      # Create the pull request.
      - name: Create Pull Request
        env:
          COMMIT_MESSAGE: "feat: bump and clean go mod, go version: ${{ env.LATEST_GO_VERSION }}"
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        id: pull-request
        with:
          # Needs to use a PAT token to trigger Github Actions CI Checks. However, if using a Personal Access Token (PAT) the action will create the pull request, but commits will not be signed.
          # Commit signing is only supported with bot generated tokens. The default GIIHUB_TOKEN will not trigger other workflows. Therefore, use a token generated using a GitHub App.
          token: ${{ steps.app-token.outputs.token }}
          commit-message: ${{ env.COMMIT_MESSAGE }}
          sign-commits: true
          branch: bump-clean-go-mod
          delete-branch: true
          title: ${{ env.COMMIT_MESSAGE }}
          body: |
            - Auto-generated by [bump-clean-go-mod][1] Github action.

            [1]: https://github.com/andrew-field/reusable-workflows/actions/workflows/bump-clean-go-mod.yml
          labels: automated
          assignees: andrew-field
