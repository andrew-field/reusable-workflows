name: Build and test

on:
  workflow_call:
    inputs:
      test_flags:
        description: "Extra flags to be used with the go test step"
        required: false
        type: string

jobs:
  build_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      # Get the code.
      - name: Checkout repoistory
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed I think for the test coverage report.

        # Fetch the latest go version as text to build and test with the latest go version.
        # This works under the principle of keeping up to date with the latest releases.
      - name: Get latest go version
        run: echo "latest_go_version=$(curl https://go.dev/VERSION?m=text | grep -oP '(\d+\.\d+\.\d+)')" >> $GITHUB_ENV

        # Get the latest go runtime.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.latest_go_version }}

      # Make sure all packages build.
      - name: Build
        run: go build ./...

      # Runs the unit tests. Can not run the fuzz tests here because of the coverprofile flag which is designed for specific, defined tests with predictable inputs and outputs.
      # Nowadays, go test also runs go vet, which is a sort of go code checker.
      - name: Test and run coverage
        run: go test ./... -coverprofile=coverage.out -covermode=atomic ${{ inputs.test_flags }} \;

      # Upload the test results to Codecov.
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Runs just the fuzz tests.
      # Using go test ./... -fuzz Fuzz -fuzztime 30s -run=^$ fails with "cannot use -fuzz flag with multiple packages"
      # This is because I'm testing all packages within the repository whereas Fuzz testing is designed to operate on a single package at a time. The -fuzz flag is incompatible with the ... wildcard.
      # This approach uses shell commands to find packages containing fuzz tests and then runs go test on each one individually.
      - name: Execute fuzz tests
        run: |
          for pkg in $(go list ./... | xargs -I{} sh -c 'if go list -f "{{\"${{range .TestGoFiles}}{{.}}{{\"${{end}}}}\"}}" {} | grep -q "Fuzz"; then echo {}; fi'); do
            go test "$pkg" -fuzz Fuzz -fuzztime 30s -run=^$
          done

      # Run static check, which is a sort of official "state of the art linter".
      - name: Static check
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false
