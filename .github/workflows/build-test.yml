name: Build and test

on:
  workflow_call:
    inputs:
      test_flags:
        description: "Extra flags to be used with the go test step"
        required: false
        type: string

jobs:
  build_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      # Get the code.
      - name: Checkout repoistory
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Needed I think for the test coverage report.

        # Fetch the latest go version as text to build and test with the latest go version.
      - name: Get latest go version
        # Store as an environment variable. Good practise to have $GITHUB_ENV double quoted according to SC2086 â€“ ShellCheck.
        run: echo "LATEST_GO_VERSION=$(curl https://go.dev/VERSION?m=text | grep -oP '(\d+\.\d+\.\d+)')" >> "$GITHUB_ENV"

        # Get the latest go runtime.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_GO_VERSION }} # Access via the environment context.

      # Make sure all packages build.
      - name: Build
        run: go build ./...

      # Run the unit tests. Can not run the fuzz tests here because of the coverprofile flag which is designed for specific, defined tests with predictable inputs and outputs.
      # go test also runs go vet, which is a go code checker. By default, only a subset of all the vet checks are run by go test
      # unless the -vet=all flag is set. https://pkg.go.dev/cmd/go#hdr-Test_packages
      - name: Test and run coverage
        run: go test ./... -vet=all -coverprofile=coverage.out -covermode=atomic ${{ inputs.test_flags }} \;

      # Upload the test results to Codecov.
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Runs just the fuzz tests.
      # Using go test ./... -fuzz Fuzz -fuzztime 10s -run=^$ fails with "cannot use -fuzz flag with multiple packages"
      # This is because I'm testing all packages within the repository whereas Fuzz testing is designed to operate on a single package (and single Fuzz test) at a time.
      # The -fuzz flag is incompatible with the ... wildcard. # When specified, the command line argument must match exactly one package within the main module,
      # and regexp must match exactly one fuzz test within that package. This approach loops through all the packages containing test files, finds all of the fuzz tests
      # and then runs go test -Fuzz on each one. All fuzz tests need to be in a test file but this is the convention.
      - name: Execute fuzz tests
        run: |
          set -euo pipefail # Exit if any command fails, exit if an uninitialised variable is used, report a failure if any command in a pipeline fails, rather than just the last one.

          # Get all the packages with test files. Could just use 'go list ./...' but this does an extra step to only include packages with test files. See https://pkg.go.dev/cmd/go#hdr-List_packages_or_modules
          packages=$(go list -f '{{if .TestGoFiles}}{{.ImportPath}}{{end}}' ./...) 

          # For each package, run each fuzz test.
          for package in $packages; do
            # List all the fuzz tests. Filters this output to only include lines that begin with "Fuzz".
            # This is important because go test -list Fuzz also prints ok and the package path, which we do not wish to interpret as fuzz test names.
            # Use || true to avoid failing and exiting the script immediately if no fuzz tests are found for a particular package (grep command fails in this case).
            fuzz_tests=$(go test $package -list Fuzz | grep ^Fuzz || true)

            if [ -z "$fuzz_tests" ]; then
              echo "No fuzz tests found for package $package."
              continue
            fi

            echo "------------------------------------"
            echo "The following fuzz tests will be run in $package:"
            echo $fuzz_tests
            echo "------------------------------------"

            for fuzz_test in "$fuzz_tests"; do  # Good practise to use double quotes according to SC2086 - ShellCheck.
              go test $package -fuzz $fuzz_test -fuzztime=5s -run ^$ # go test -fuzz will run the other tests by default, so we need to specify -run ^$ (which matches nothing) to only run the fuzz test.
            done
          done

      # Run static check, which is a sort of official "state of the art linter".
      - name: Static check
        uses: dominikh/staticcheck-action@v1
        with:
          version: "latest"
          install-go: false
